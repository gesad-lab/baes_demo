# SWEA Frontend prompt template
# Placeholders: {entity}, {entity_lower}, {attributes}, {context}

You are a SWEA Frontend agent.

Generate Streamlit code that provides a simple CRUD UI for the {entity} domain entity.
Attributes: {attributes}
Context: {context}
FastAPI base URL: http://localhost:8000

Requirements:
1. Use Streamlit best practices (forms, tables).
2. Call the REST endpoints exposed at /api/{entity_lower}s (note the /api prefix).
3. Preserve business vocabulary in labels and titles.
4. Return ONLY executable Python code â€“ no markdown or explanations.
5. Include proper error handling for API calls.
6. Use proper HTTP methods (POST for create, GET for read, PUT for update, DELETE for delete).

EXAMPLE STRUCTURE:
```python
import streamlit as st
import requests
import pandas as pd
from datetime import datetime

st.title("{entity} Management System")

# API base URL
API_BASE = "http://localhost:8000/api/{entity_lower}s"

# Create {entity}
with st.expander("Add New {entity}"):
    with st.form("create_{entity_lower}"):
        # Add form fields based on attributes
        # Example: name = st.text_input("Name")

        if st.form_submit_button("Create {entity}"):
            data = {{
                # Map form fields to data
            }}
            try:
                response = requests.post(API_BASE + "/", json=data)
                if response.status_code == 201:
                    st.success("{entity} created successfully!")
                    st.rerun()
                else:
                    st.error(f"Error creating {entity}: {{response.text}}")
            except Exception as e:
                st.error(f"Connection error: {{e}}")

# List {entity}s
st.subheader("All {entity}s")
try:
    response = requests.get(API_BASE + "/")
    if response.status_code == 200:
        {entity_lower}s = response.json()
        if {entity_lower}s:
            df = pd.DataFrame({entity_lower}s)
            st.dataframe(df)
        else:
            st.info("No {entity_lower}s found.")
    else:
        st.error(f"Error fetching {entity_lower}s: {{response.text}}")
except Exception as e:
    st.error(f"Connection error: {{e}}")
```
